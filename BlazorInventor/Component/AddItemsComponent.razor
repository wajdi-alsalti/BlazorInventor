@typeparam T

@inject IDataAccessLibrary<T> ItemsData

<div class="container">
    @* search bar for Items *@
    <div class="autocomplete w-100">
        <input placeholder="Search" @bind=selectedItemsName @oninput=HandleInput class="form-control filter" />
    </div>

    <label for="wagenList">Add new Item</label>
    <div class="container">
        @*list of the Items*@
        <div>
            @if (Items is not null)
            {
                <div class="overflow-auto p-3 containerComponentHeight">
                    <ul class="list-group">
                        @foreach (var item in Items)
                        {
                            <li class="list-group-item list-group-item-primary" role="button" @onclick=@(()=> ItemAddToListClicked(item))>@ContextItemsRender(item)</li>
                        }
                    </ul>
                </div>
            }
        </div>

    </div>
    <div class="container mt-3">
        <label for="materialsadded">Items added</label>

        @*List of the added Items *@
        @if (ItemsToAdd is not null)
        {
            <div class="overflow-auto p-3 containerComponentHeight">
                <ul class="list-group">
                    @foreach (var item in ItemsToAdd)
                    {
                        <div class="row">
                            <div class="col-11 ">
                                <li class="list-group-item list-group-item-success">@ContextAddedItemsRender(item)</li>
                            </div>

                            <div class="col-1 container d-flex align-items-end justify-content-end">
                                <button type="button" class="btn-close mb-2" @onclick=@(()=> ItemRemoveFromListClicked(item))></button>
                            </div>
                        </div>
                    }
                </ul>
            </div>
        }
    </div>
</div>


@code {
    /// <summary>
    /// list of Items we have from DB
    /// </summary>
    public List<T> Items { get; set; }

    /// <summary>
    /// list of the Items we added to new Table DB
    /// </summary>
    [Parameter]
    public List<T> ItemsToAdd { get; set; }

    /// <summary>
    /// render the items
    /// use @context to access the property
    /// </summary>
    [Parameter]
    public RenderFragment<T> ContextItemsRender{ get; set; }

    /// <summary>
    /// render the items has been added
    /// use @context to access the property
    /// </summary>
    [Parameter]
    public RenderFragment<T> ContextAddedItemsRender{ get; set; }

    /// <summary>
    /// Retrieve all Data From Data Base
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        Items = await ItemsData.GetAllAsync();
    }

    /// <summary>
    /// add item in list after click
    /// </summary>
    /// <param name="item">Item of Type T</param>
    private void ItemAddToListClicked(T item)
    {
        if (ItemsToAdd is not null)
        {
            ItemsToAdd.Add(item);
        }

        if (Items is not null)
        {
            Items.Remove(item);
        }
    }

    /// <summary>
    /// remove item from the list
    /// </summary>
    /// <param name="item">Item of Type T</param>
    private void ItemRemoveFromListClicked(T item)
    {
        if (Items is not null)
        {
            Items.Add(item);
        }

        if (ItemsToAdd is not null)
        {
            ItemsToAdd.Remove(item);
        }
    }
    
    private async Task CloseModal()
    {
        Items = await ItemsData.GetAllAsync();
        ItemsToAdd.Clear();
    }
    

    #region Logic to search in Items

    /// <summary>
    /// the text we add in text box
    /// </summary>
    private string inputText = string.Empty;

    private string selectedItemsName = string.Empty;

    /// <summary>
    /// delegate handelt the filter data
    /// </summary>
    [Parameter]
    public Func<T,bool> ItemsFilter{ get; set; }

    /// <summary>
    /// Event triggerd when add text in Text Box to search for Items.
    /// need to add function handel .the output from the seach bar in example
    /// (Example) string? filterTyping;
    /// private void FilterOutPut(string data)
    /// {
    ///     filterTyping = data;
    /// }
    /// </summary>
    [Parameter]
    public EventCallback<string> OnTypingFilter{ get; set; }

    // auto complete functions
    private async Task HandleInput(ChangeEventArgs e)
    {
        var itemsData = await ItemsData.GetAllAsync();
        inputText = e.Value?.ToString();
        await OnTypingFilter.InvokeAsync(inputText);
        if (inputText?.Length >= 2)
        {
            Items = itemsData.Where(ItemsFilter).ToList();
        }
        else if (inputText?.Length == 0)
        {
            Items = itemsData;
        }
        else if (string.IsNullOrEmpty(selectedItemsName))
        {
            Items = itemsData;
        }
    }

    #endregion
    
}