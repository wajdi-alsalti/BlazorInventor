@page "/MaterialDetail/{Id}"

@inject IDataAccessLibrary<MaterialsModel> _materialsData
@inject IConfiguration config
@inject NavigationManager navManager
<h3>@material.Name Details</h3>

<div class="container">
    <EditForm Context="UpDateMaterialsForm" OnValidSubmit="@UpDateMaterial" Model="@material">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label id="materialName">Materila Name</label>
            <input class="form-control" type="text" placeholder="Material Name" for="materialName" @bind-value="material.Name" />
        </div>
        <div>
            <label id="materialSapNumber">Sap Number</label>
            <input class="form-control" for="materialSapNumber" type="number" placeholder="Material Sap Number" @bind-value="material.SapNumber" />
        </div>
        <div>
            <label id="materilaImage">Material Image</label>
        </div>
        <div>
            @*accept the file we want to upload but not force it to not uplaod*@
            <img class="rounded mx-auto d-block" src="@material.Image" alt="pic" width="300" height="300" />
            <InputFile OnChange="@LoadFile" class="form-control" accept=".png,.jpg,.jpeg" />
            @if (errors.Count > 0)
            {
                <h2>Errors</h2>
                <ul class="text-danger">
                    @foreach (var error in errors)
                    {
                        <li>@error</li>
                    }
                </ul>
            }
        </div>
        <div>
            <label for="materilaQuantity">Quantity in Single Box</label>
            <input id="materilaQuantity" class="form-control" type="number" placeholder="Quantity" @bind-value="material.Quantity" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary mt-2">Update Material</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private MaterialsModel material = new();

    private long maxFileSize = 1024 * 1024 * 3; // it is 3 mb
    private int maxAllowedFiles = 1;
    private List<string> errors = new();

    private string ImageName = "";

    private IBrowserFile? file;

    protected override async Task OnInitializedAsync()
    {
        material = await _materialsData.GetByIdAsync(Id);
    }

    private async Task UpDateMaterial(EditContext context)
    {
        // TODO fix the problem if update item image will delete it and need to update
        var updatedMaterial = (MaterialsModel)context.Model;
        updatedMaterial.Image = await CaptureFile();
        await _materialsData.UpdateAsync(updatedMaterial.Id, updatedMaterial);
        navManager.NavigateTo("/updateMaterila");
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            // create a new name to file to do not mess with name files or double it
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string relativePath = Path.Combine("materialsImage", newFileName);

            ImageName = newFileName;

            // path to directory FileStorage in appsettings and folder name is materialsImage
            // the path will be C:\\Users\\wajdi\\OneDrive\\Desktop\\storgeFile\\materialsImage\\nameOfFile
            //C:\Users\wajdi\source\repos\BlazorInventor\BlazorInventor\wwwroot\
            string path = Path.Combine(config.GetValue<string>("FileStorage"), "materialsImage", newFileName);

            // create the folder materialsImage if it is not created at the folder path
            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage"), "materialsImage"));

            await using FileStream fs = new(path, FileMode.Create);

            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error : {ex.Message}");
            throw;
        }


    }
    private async Task<bool> CheckIfItemSaved(MaterialsModel material)
    {
        var materialsInDB = await _materialsData.GetAllAsync();
        // max number of the sapNumber in DB
        var maxSapNumber = materialsInDB.Max(s => s.SapNumber);

        var filterName = materialsInDB.Where(n => n.Name == material.Name).FirstOrDefault();
        var filterSap = materialsInDB.Where(n => n.SapNumber == material.SapNumber).FirstOrDefault();
        if (filterName is null && filterSap is null)
        {
            return true;
        }
        return false;
    }


}
