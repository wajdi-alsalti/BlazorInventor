@page "/AddMaterials"
@inject IMaterialsData materialsData
@inject IConfiguration config


<h3>Add Materials</h3>

@* <ModalWarrning @ref="modalWarrning" /> *@
<ToastInformation @ref=TostInfo Message=@Toast.ToastMessage Delay=@Toast.Delay Header=@Toast.ToastHeader ToastBg=@Toast.ToastBG/>

<EditForm Context="addMaterialsForm" OnValidSubmit="@AddNewMaterial" Model="@newMaterial">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label id="materialName">Materila Name</label>
    </div>
    <div >
        <input class="form-control" type="text" placeholder="Material Name" for="materialName" @bind-value="newMaterial.Name" />
    </div>
    <div>
        <label id="materialName">Sap Number</label>
    </div>
    <div >
        <input class="form-control" type="number" placeholder="Material Sap Number" @bind-value="newMaterial.SapNumber" />
    </div>
    <div>
        <label>Material Image</label>
    </div>
    <div style="border:1px solid gray;">
        @*accept the file we want to upload but not force it to not uplaod*@
        <InputFile OnChange="@LoadFile" class="form-control" accept=".png,.jpg,.jpeg"/>
        @if (errors.Count > 0)
        {
            <h2>Errors</h2>
            <ul class="text-danger">
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        }
    </div>
    <div>
        <label>Quantity in Single Box</label>
    </div>
    <div >
        <input class="form-control" type="number" placeholder="Quantity" @bind-value="newMaterial.Quantity" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary mt-2">Add Material</button>
    </div>
</EditForm>

@code {
    private MaterialsUIModel newMaterial = new();

    private string ImageName = "";

    private long maxFileSize = 1024 * 1024 * 3; // it is 3 mb
    private int maxAllowedFiles = 1;
    private List<string> errors = new();

    private IBrowserFile? file;

    /// <summary>
    /// refernce for dialog
    /// </summary>
    // private ModalWarrning modalWarrning { get; set; }

    private ToastInformation TostInfo{ get; set; }
    private ToastModel Toast = new();

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            // create a new name to file to do not mess with name files or double it
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string relativePath = Path.Combine("materialsImage", newFileName);

            ImageName = newFileName;

            // path to directory FileStorage in appsettings and folder name is materialsImage
            // the path will be C:\\Users\\wajdi\\OneDrive\\Desktop\\storgeFile\\materialsImage\\nameOfFile
            //C:\Users\wajdi\source\repos\BlazorInventor\BlazorInventor\wwwroot\
            string path = Path.Combine(config.GetValue<string>("FileStorage"), "materialsImage", newFileName);

            // create the folder materialsImage if it is not created at the folder path
            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage"), "materialsImage"));

            await using FileStream fs = new(path, FileMode.Create);

            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error : {ex.Message}");
            throw;
        }


    }

    private async Task AddNewMaterial()
    {
        string relativePath = await CaptureFile();
        MaterialsModel material = new MaterialsModel()
            {
                Name = newMaterial.Name,
                SapNumber = newMaterial.SapNumber,
                Quantity = newMaterial.Quantity,
                Image = relativePath
            };

        if (await CheckIfItemSaved(material) == true)
        {
            await materialsData.CreateMaterial(material);

            await ShowToastDialog("New Material Added", $"Material {material.Name} has been Addedd Succefully","success");

            // clear the form and list to refresh after submit
            newMaterial = new();
            file = null;
            errors.Clear();
        }
        else
        {
            await ShowToastDialog("Can not add Material", $"Sap Number {material?.SapNumber} or Article Name '{material?.Name}' already in Data Base!!","danger");
        }


    }

    private async Task<bool> CheckIfItemSaved(MaterialsModel material)
    {
        var materialsInDB = await materialsData.GetMaterialAsync();
        // max number of the sapNumber in DB
        var maxSapNumber = materialsInDB.Max(s => s.SapNumber);

        var filterName = materialsInDB.Where(n => n.Name == material.Name).FirstOrDefault();
        var filterSap = materialsInDB.Where(n => n.SapNumber == material.SapNumber).FirstOrDefault();
        if (filterName is null && filterSap is null)
        {
            return true;
        }
        return false;
    }

    // private void ShowDialogWarrning(string mesaage)
    // {
    //     modalWarrning.Show(mesaage);
    // }

    private async Task ShowToastDialog(string header, string message,string toastBG)
    {
        Toast.ToastHeader = header;
        Toast.ToastMessage = message;
        Toast.ToastBG = toastBG;
        Toast.Delay = 3000;

        await TostInfo.ShowToast();
    }
}
