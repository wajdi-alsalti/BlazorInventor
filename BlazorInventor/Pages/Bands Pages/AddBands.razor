@page "/AddBands"

@inject IDataAccessLibrary<BandsModel> _bandData
@inject IDataAccessLibrary<SingleWagenModel> _singleWagen


<h3>New Band</h3>
<ToastInformation @ref=TostInfo Message=@Toast.ToastMessage Delay=@Toast.Delay Header=@Toast.ToastHeader ToastBg=@Toast.ToastBG />
<EditForm Model="@newBand" OnValidSubmit="@AddNewBand" Context="NewBandAdded">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        @*input for the new band number*@
        <div class="mb-3 col-9">
            <label for="bandNumber">Band Number</label>
            <InputNumber class="form-control" id="bandNumber" @bind-Value="newBand.Number"></InputNumber>
        </div>
        @*component handel the list of items*@
        <AddItemsComponent T="SingleWagenModel" ItemsToAdd="@wagensToAdd"
                            ItemsFilter="@(x=>x.Name.Contains(filterTyping,StringComparison.InvariantCultureIgnoreCase))" 
                            OnTypingFilter="FilterOutPut">
            @*render the name of items*@
            <ContextItemsRender>
                @context.Name
            </ContextItemsRender>
            @*render the name of items has been added*@
            <ContextAddedItemsRender>
                <div class="row">
                    @*name of items*@
                    <div class="col-9">
                        @context.Name
                    </div>

                    <div class="col-3">
                        @*label*@
                        <label for="wagenPosition">Wagen Position</label>
                        @*select the wagen position*@
                        <select class="form-select" @bind="@context.Position">
                            @for (int position = 1; position < 10; position++)
                            {
                                <option>@position</option>
                            }
                        </select>
                    </div>
                </div>
            </ContextAddedItemsRender>
        </AddItemsComponent>
        
    </div>
    <button type="submit" class="btn btn-primary mt-3">Add Band</button>
</EditForm>

@code {
    /// <summary>
    /// list we have from DB
    /// </summary>
    private List<SingleWagenModel> wagens;

    /// <summary>
    /// list of the wagens we added to band
    /// </summary>
    private List<SingleWagenModel> wagensToAdd = new();


    private BandUiModel newBand = new();


    private async Task AddNewBand(EditContext context)
    {
        var newBandAdded = (BandUiModel)context.Model;
        List<BasicWagenModel> basicWagens = new();

        BandsModel band = new();
        band.Number = newBand.Number;
        foreach (var item in wagensToAdd)
        {
            basicWagens.Add(new BasicWagenModel(item));
        }
        band.Wagens = basicWagens;
        if (band.Wagens.Count > 0)
        {
            await _bandData.AddNew(band);
            await ShowToastDialog("New Band", $"Band {band.Number} has been added", "success");
        }else
        {
            await ShowToastDialog("Warrning", $"Band {band.Number} has been not added", "danger");
        }

        // after we add the new band we clear the model and list to refresh the items
        newBand = new();
        wagensToAdd.Clear();
        
        wagens = await _singleWagen.GetAllAsync();

    }

    private ToastInformation TostInfo { get; set; }
    private ToastModel Toast = new();
    private async Task ShowToastDialog(string header, string message, string toastBG)
    {
        Toast.ToastHeader = header;
        Toast.ToastMessage = message;
        Toast.ToastBG = toastBG;
        Toast.Delay = 3000;

        await TostInfo.ShowToast();
    }

    string? filterTyping;

    private void FilterOutPut(string data)
    {
        filterTyping = data;
    }
}
