@page "/AddBands"

@inject IBandsData bandData
@inject ISingleWagenData singleWagen


<h3>New Band</h3>
@* dialog to show when we click at the list item to add to new band*@
<ModalAddPosition @ref=modalAdd UserChoise="ConfirmAddPosition" wagenDetail="wagenDetail" />

<EditForm Model="@newBand" OnValidSubmit="@AddNewBand">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div>

            <div class="mb-3">
                <label for="bandNumber">Band Number</label>
                <InputNumber class="form-control" id="bandNumber" @bind-Value="newBand.Number"></InputNumber>
            </div>

            <div>
                <label for="wagenList" >Add Wagen</label>
                <div id="wagenList">
                    @*list of the wagens*@
                    <div >
                        @if (wagens is not null)
                        {
                            <div >
                                <ul class="list-group" >
                                    @foreach (var item in wagens)
                                    {
                                        <li class="list-group-item list-group-item-primary" role="button" @onclick="(()=> ShowDialogPositon(item))">@item.Name</li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                    
                </div>
                <div class="mt-3">
                    <label for="materialsadded">add Wagen to Band</label>
                    @*List of the added wagens *@
                    @if (wagensToAdd is not null)
                    {
                        <ul class="list-group">
                            @foreach (var item in wagensToAdd)
                            {
                                <li class="list-group-item list-group-item-success" @onclick="(()=> ItemRemoveFromListClicked(item))">@item.Name </li>
                                <span class="badge bg-primary rounded-pill">At position @item.Position</span>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Add Band</button>
</EditForm>

@code {
    /// <summary>
    /// list we have from DB
    /// </summary>
    private List<SingleWagenModel> wagens;

    /// <summary>
    /// list of the wagens we added to band
    /// </summary>
    private List<SingleWagenModel> wagensToAdd = new();


    private BandUiModel newBand = new();

    /// <summary>
    /// to take the info to dialog details
    /// </summary>
    public SingleWagenModel wagenDetail { get; set; }

    /// <summary>
    /// reference to modal dialog to add position to wagen
    /// </summary>
    protected ModalAddPosition modalAdd { get; set; }

    protected override async Task OnInitializedAsync()
    {
        wagens = await singleWagen.GetWagenAsync();
    }
    private async Task AddNewBand()
    {
        List<BasicWagenModel> basicWagens = new();

        BandsModel band = new();
        band.Number = newBand.Number;
        foreach (var item in wagensToAdd)
        {
            basicWagens.Add(new BasicWagenModel(item));
        }
        band.Wagens = basicWagens;
        if (band.Wagens.Count > 0)
        {
            await bandData.CreateBand(band);
        }

        // after we add the new band we clear the model and list to refresh the items
        newBand = new();
        wagensToAdd.Clear();
        wagens.Clear();
        wagens = await singleWagen.GetWagenAsync();

    }


    private void ItemAddToListClicked(SingleWagenModel singleWagen)
    {
        // add the value from input to selected wagen
        if (singleWagen.Position != 0)
        {
            if (wagensToAdd is not null)
            {
                wagensToAdd.Add(singleWagen);
            }

            if (wagens is not null)
            {
                wagens.Remove(singleWagen);
            }
        }
    }
    private void ItemRemoveFromListClicked(SingleWagenModel singleWagen)
    {
        // singleWagen.Position = 0;
        if (wagens is not null)
        {
            wagens.Add(singleWagen);
        }

        if (wagensToAdd is not null)
        {
            wagensToAdd.Remove(singleWagen);
        }
    }

    private void ShowDialogPositon(SingleWagenModel singleWagen)
    {
        wagenDetail = singleWagen;
        modalAdd.Show($"You need to add position to ' {singleWagen.Name} ' ");
    }

    protected void ConfirmAddPosition(SingleWagenModel add)
    {
        ItemAddToListClicked(add);
    }
}
