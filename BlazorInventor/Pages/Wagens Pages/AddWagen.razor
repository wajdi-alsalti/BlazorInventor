@page "/AddWagen"

@inject IMaterialsData materialsData
@inject ISingleWagenData singleWagen

<h3>AddWagen</h3>

<EditForm Model="@newWagenModel" OnValidSubmit="@AddWagenDB">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div class="row">
            <div class="col">
                <div class="mb-3">
                    <label for="wagen">Wagen Name</label>
                    <InputText id="wagen" class="form-control" placeholder="Add Wagen name" @bind-Value=newWagenModel.Name />
                </div>
                <AddMaterialsComponent AddedmaterilasList="@addedmaterilasList"/>
                <div class="center-children">
                <button type="submit" class="btn btn-primary"> Add Wagen</button>
                </div>
            </div>
        </div>
</EditForm>
@code {
    private List<MaterialsModel> addedmaterilasList = new();

    private WagensUiModel newWagenModel = new();

    

    private async Task<List<MaterialsModel>> GetMaterials()
    {
        return await materialsData.GetMaterialAsync();
    }

    private async Task AddWagenDB()
    {
        List<BasicMaterialsModel> basicMaterials = new();
        BandsModel newBand = new();
        newBand.Id = newWagenModel.Id;

        foreach (var item in addedmaterilasList)
        {
            basicMaterials.Add(new BasicMaterialsModel(item));
        }

        SingleWagenModel single = new();

        single.WagenMaterials = basicMaterials;
        single.Name = newWagenModel.Name;
        await singleWagen.CreateWagenTest(single);

        // clear the form and list to refresh after submit
        newWagenModel = new();
        addedmaterilasList.Clear();
    }
}
