@page "/AddWagen"

@inject IDataAccessLibrary<SingleWagenModel> _singleWagen
@inject IDataAccessLibrary<MaterialsModel> _materialsData
<h3>AddWagen</h3>

<ToastInformation @ref=TostInfo Message=@Toast.ToastMessage Delay=@Toast.Delay Header=@Toast.ToastHeader ToastBg=@Toast.ToastBG />

<EditForm Model="@newWagenModel" OnValidSubmit="@AddWagenDB" Context="newWagen">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div class="row">
            <div class="col">
                <div class="mb-3">
                    <label for="wagen">Wagen Name</label>
                    <InputText id="wagen" class="form-control" placeholder="Add Wagen name" @bind-Value=newWagenModel.Name />
                </div>
                
                <AddItemsComponent T="MaterialsModel" 
                                ItemsToAdd="@addedmaterilasList"
                                ItemsFilter="@(x=>x.Name.Contains(filterTyping,StringComparison.InvariantCultureIgnoreCase))"
                                GetData="@Givedata"
                                OnTypingFilter="FilterOutPut">
                    <ContextItemsRender>
                        @context.Name
                    </ContextItemsRender>
                    <ContextAddedItemsRender>
                        @context.Name
                    </ContextAddedItemsRender>
                </AddItemsComponent>

               
                <div class="center-children">
                    <button type="submit" class="btn btn-primary"> Add Wagen</button>
                </div>
            </div>
        </div>
</EditForm>

@code {
    private List<MaterialsModel> addedmaterilasList = new();
    private WagensUiModel newWagenModel = new();



    private async Task AddWagenDB()
    {
        List<BasicMaterialsModel> basicMaterials = new();
        BandsModel newBand = new();
        newBand.Id = newWagenModel.Id;

        foreach (var item in addedmaterilasList)
        {
            basicMaterials.Add(new BasicMaterialsModel(item));
        }

        SingleWagenModel single = new();

        single.WagenMaterials = basicMaterials;
        single.Name = newWagenModel.Name;
        await _singleWagen.AddNew(single);

        // clear the form and list to refresh after submit
        newWagenModel = new();
        addedmaterilasList.Clear();
    }

    private ToastInformation TostInfo { get; set; }
    private ToastModel Toast = new();

    private async Task ShowToastDialog(string header, string message, string toastBG)
    {
        Toast.ToastHeader = header;
        Toast.ToastMessage = message;
        Toast.ToastBG = toastBG;
        Toast.Delay = 3000;

        await TostInfo.ShowToast();
    }

    string? filterTyping;

    private void FilterOutPut(string data)
    {
        filterTyping = data;
    }

    private Task<List<MaterialsModel>> Givedata()
    {
        return _materialsData.GetAllAsync();
    }
}
