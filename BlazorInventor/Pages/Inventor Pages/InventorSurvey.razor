@page "/InventorSurvey/{ContollersId}/{Id}"


@inject NavigationManager navManager

@inject IDataAccessLibrary<BandsModel> bandData
@inject IDataAccessLibrary<SingleWagenModel> wagenData
@inject IDataAccessLibrary<MaterialsModel> materialData
@inject IDataAccessLibrary<InventorControllers> inventorControllers
@inject IDataAccessLibrary<InventorModel> inventorInfo


<h3>Inventor Survey</h3>
@if (!ShowTablePreview)
{
    <div class="container mt-3">
        <EditForm Model="@firstItem" OnValidSubmit="AddItemsBeforeAddedToDB">
            @if (wagen is not null)
            {
                <h2>@wagen.Name wagen</h2>
            }
            @if (firstItem is not null)
            {
                <div class="container border border-ligh rounded-2 ">
                    
                    <p class="mt-3"> <strong>Article Name :</strong>  @firstItem.Name</p>

                    <div class="d-flex justify-content-center align-items-center mb-3">
                        <img src="@firstItem.Image" alt="image" width="300" height="300"/>
                    </div>

                    <p> <strong>SapNumber : </strong> @firstItem.SapNumber</p>
                    <p> <strong>Quantity : </strong> @firstItem.Quantity</p>
                    <input class="form-control mb-3" type="number" @bind="inventorItemSumme" placeholder="Summe" disabled=@DisableInput() />
                    <div class="d-flex justify-content-center align-items-center mb-3">
                        <button class="btn btn-primary w-100">@buttonText</button>
                    </div>
                </div>
            }
        </EditForm>
    </div>
}

@if (ShowTablePreview)
{
    <div class="container">
        <table class="table table-bordered align-middle">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Item Name</th>
                    <th scope="col">SapNumber</th>
                    <th scope="col">Quantinty</th>
                    <th scope="col">Image</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < materialsControlled.Count; i++)
                {
                    <tr>
                        <th scope="row">@(i+1)</th>
                        <td>@materialsControlled[i].Name</td>
                        <td>@materialsControlled[i].SapNumber</td>
                        <td>@materialsControlled[i].Quantity</td>
                        <td><img src="@materialsControlled[i].Image" alt="image" width="60" height="60" />  </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-center">
            <button type="button" class="btn btn-primary" @onclick=@SendInventorData>Send To Admin</button>
        </div>
    </div>
}

<ToastInformation @ref=TostInfo Delay=@ToastModel.Delay Header=@ToastModel.ToastHeader Message=@ToastModel.ToastMessage ToastBg=@ToastModel.ToastBG/>

@code {
    private ToastInformation TostInfo { get; set; }
    private ToastModel ToastModel = new();

    /// <summary>
    /// id of the wagen we have, came from inventor index
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// ContollersId for the team who controlle the wagen, came from inventor index
    /// </summary>
    [Parameter]
    public string ContollersId { get; set; }

    /// <summary>
    /// Wagen info from DB
    /// </summary>
    private SingleWagenModel wagen;

    private List<MaterialsModel> materialsList = new();

    private MaterialsModel firstItem = new();

    private int inventorItemSumme;

    private int currentMaterialIndex = 0;

    private string buttonText = "Next";

    private List<MaterialsModel> materialsControlled = new();

    private bool ShowTablePreview = false;

    protected override async Task OnInitializedAsync()
    {
        wagen = await wagenData.GetByIdAsync(Id);

        materialsList = await ConvertFromBasicModelToMaterial(wagen.WagenMaterials);

        firstItem = materialsList[currentMaterialIndex];
    }

    private async Task<List<MaterialsModel>> ConvertFromBasicModelToMaterial(List<BasicMaterialsModel> basicMaterials)
    {
        List<MaterialsModel> materialsList = new();
        foreach (var item in basicMaterials)
        {
            var material = await materialData.GetByIdAsync(item.Id);
            materialsList.Add(material);
        }
        return materialsList;
    }

    private bool LoadNextMaterial()
    {
        currentMaterialIndex++;
        if (currentMaterialIndex < materialsList.Count)
        {
            firstItem = materialsList[currentMaterialIndex];
            return true;
        }
        return false;
    }
    private string ButtonText()
    {
        if (currentMaterialIndex < materialsList.Count)
        {
            buttonText = "Next";
        }
        else if (currentMaterialIndex == materialsList.Count)
        {
            buttonText = "Preview";
        }

        return buttonText;
    }

    private async Task AddItemsBeforeAddedToDB(EditContext context)
    {
        var result = (MaterialsModel)context.Model;
        ButtonText();
        ShowTable();
        if (currentMaterialIndex < materialsList.Count)
        {
            if (inventorItemSumme <= result.Quantity)
            {
                result.Quantity = inventorItemSumme;
                ButtonText();
                LoadNextMaterial();
                DisableInput();

                materialsControlled.Add(result);
            }else
            {
                await ShowToastInformation($"{inventorItemSumme} is more than the Quantity of the item {result.Quantity}");
            }
        }
        inventorItemSumme = 0;
    }

    private bool DisableInput()
    {
        if (currentMaterialIndex < materialsList.Count)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private void ShowTable()
    {
        if (buttonText == "Preview")
        {
            ShowTablePreview = true;
        }
    }

    private async Task ShowToastInformation(string message)
    {
        ToastModel.ToastMessage = message;
        ToastModel.ToastHeader = "Warrning";
        ToastModel.ToastBG = "danger";
        ToastModel.Delay = 5000;
        await TostInfo.ShowToast();
    }

    private async Task SendInventorData()
    {
        // navManager.NavigateTo("/Inventor");
        InventorModel inventorItems = new InventorModel();

        inventorItems.Controllers = await inventorControllers.GetByIdAsync(ContollersId);
        // to find out which band we controlled
        var band = inventorItems.Controllers.Bands;

        // look after the wagen from band table ,and the id of wagen we have from the url
        // to archive the wagen has been controlled
        var wagenDeteted = band.Wagens.Where(i => i.Id == wagen.Id).FirstOrDefault();
        inventorItems.WagenHasBeenControllerd = wagenDeteted;

        inventorItems.MaterialsHasBeenControllerd = materialsControlled;
        inventorItems.HasBeenControllerd = true;
        await inventorInfo.AddNew(inventorItems);
    }
}
