@page "/"

@using System.IO
@using System.Text

@inject IJSRuntime JS

@inject IDataAccessLibrary<BandsModel> dataBase
@inject IDataAccessLibrary<SingleWagenModel> dataWagen
@inject IDataAccessLibrary<ControllerModel> dataController
@inject IDataAccessLibrary<InventorModel> dataInventor
@inject IDataAccessLibrary<MaterialsModel> dataMaterials

@inject IDataAccessLibrary<BandsModel> dataBaseLibrary

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<ToastInformation @ref=TostInfo Header="@toast.ToastHeader" Message="@toast.ToastMessage" ToastBg="@toast.ToastBG" Delay=@toast.Delay/>
<button class="btn btn-dark" @onclick="ShowToastDialog">Toast</button>


<h3>Autocomplete Demo</h3>

<div class="autocomplete w-25">
    <input @bind=selectedmaterialsName @oninput=HandleInput class="form-control filter" />
    @if (materials is not null)
    {
        <ul class="options">
            @if (materials.Any())
            {
                @foreach (var material in materials)
                {
                    <li class="option" @onclick=@(_ => SelectCustomer(material.Id))>
                        <span class="option-text">@material.Name</span>
                    </li>
                }
            }
            else
            {
                <li class="disabled option">No results</li>
            }
        </ul>
    }
</div>

@if (!string.IsNullOrWhiteSpace(selectedmaterialsName))
{
    <p class="mt-3">
        Selected materila is @selectedmaterialsName with ID <strong>@selectedmaterialsId</strong>
    </p>
}

<button class="btn btn-primary" @onclick="DownloadFileFromStream">
    Download File
</button>


<button class="btn btn-primary" @onclick=RetrieveDataFromClassLibrary>Class Abstract</button>

@code{

    private ToastInformation TostInfo { get; set; }
    private ToastModel toast = new();
    private async Task ShowToastDialog()
    {
        toast.ToastMessage = "hi";
        toast.ToastHeader = "hi header";
        toast.ToastBG = "danger";
        toast.Delay = 5000;

        await TostInfo.ShowToast();
    }

    List<MaterialsModel>? materials;
    string? selectedmaterialsId;
    string? selectedmaterialsName;
    string? filter;

    async Task HandleInput(ChangeEventArgs e)
    {
        filter = e.Value?.ToString();
        if (filter?.Length > 2)
        {
            // var filterMaterila = await materilaData.GetMaterialAsync();
            var filterMaterila = await dataMaterials.GetAllAsync();
            materials = filterMaterila.Where(material => material.Name.Contains(filter, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        else
        {
            materials = null;
            selectedmaterialsName = selectedmaterialsId = null;
        }
    }

    void SelectCustomer(string id)
    {
        selectedmaterialsId = id;
        selectedmaterialsName = materials!.First(c => c.Id.Equals(selectedmaterialsId)).Name;
        materials = null;
    }


    #region download files
    // functions to download file
    private async Task<Stream> GetFileStream()
    {
        // here the data we need to show
        var randomBinaryData = await GenerateCsvContentFromDatabase();
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
    }

    public async Task<byte[]> GenerateCsvContentFromDatabase()
    {
        List<string> controllersName = new();
        // Retrieve data from the database
        // var materilasInventor = await inventorMaterials.GetmaterialsAsync();
        var materilasInventor = await dataInventor.GetAllAsync();

        //create a simple CSV with headers
        List<string> csvLines = new List<string>
        {
            "Controllers, Band, Wagen,Wagen Position, Materials Name,Materials SapNumber,Material Quantity",
        };

        // loop inside the table in db
        foreach (var item in materilasInventor)
        {
            // controllers name
            controllersName = item.Controllers.Controllers.Select(n => n.Name).ToList();

            // loop in MaterialsControllerd to have data
            foreach (var material in item.MaterialsControllerd)
            {
                var line = $"{controllersName[0]} & {controllersName[1]},{item.BandNumber},{item.WagenName},{item.WagenPosition},{material.Name},{material.SapNumber},{material.Quantity}";
                csvLines.Add(line);
            }
        }

        string csvContent = string.Join(Environment.NewLine, csvLines);
        byte[] fileContent = Encoding.UTF8.GetBytes(csvContent);

        return fileContent;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = await GetFileStream();
        var fileName = "log.csv";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
    #endregion

    #region using abstract class to get data from DB
    async Task RetriveData()
    {
        // var bands = await dataBase.GetAllData();
        // var wagens = await dataWagen.GetAllData();
        // dataController.Delete("658440dff71ecfe119f38614");
        // ControllerModel controllerModel = new()
        //     {
        //         Name = "test",
        //         Number = 50016,
        //         ObjectIdentifer = null,
        //         HasBeenAdded = false,
        //     };


        // controllerModel.Number = 50055;
        // controllerModel.HasBeenAdded = true;
        // controllerModel.Name = "testUpdate";

        // dataController.Insert(controllerModel);
        var controllers = await dataController.GetByIdAsync("6584415dab3ca1116bf0c53b");
        controllers.Number = 50095;
        controllers.HasBeenAdded = true;
        controllers.Name = "ohla";

        await dataController.UpdateAsync(controllers.Id, controllers);
    }
    #endregion

    async Task RetrieveDataFromClassLibrary()
    {
        var bands = await dataBaseLibrary.GetAllAsync();

        // await dataBaseLibrary.DeleteAsync("658552c50c03f55af1c7b78c");
    }
}